package secureenclavesigner

type SignRequest struct {
	SecureEnclaveRequest
	// Data is the data to be signed
	Data []byte `msgpack:"data"`
	// BaseNonce is the nonce that the secure enclave command will append it's own nonce to
	BaseNonce string `msgpack:"base_nonce"`
	// SecureEnclavePubKey is the B64 encoded DER of the public key to be used to sign the challenge
	SecureEnclavePubKey []byte `msgpack:"secure_enclave_pub_key"`
}

type SignResponseOuter struct {
	Msg []byte `msgpack:"msg"`
	Sig []byte `msgpack:"sig"`
}

type SignResponseInner struct {
	// Nonce is the the secure enclave generated nonce appended to the provided base nonce
	Nonce     string `msgpack:"nonce"`
	Timestamp int64  `msgpack:"timestamp"`
	Data      []byte `msgpack:"data"`
}

type CreateKeyRequest struct {
	SecureEnclaveRequest
}

type SecureEnclaveRequest struct {
	// Challenge is the B64 encoded krypto challenge generated by the server
	Challenge []byte `msgpack:"challenge"`
	// ServerPubKey is the B64 encoded DER of the public key
	// to be used to verify the signature of the request
	ServerPubKey []byte `msgpack:"server_pub_key"`
}
